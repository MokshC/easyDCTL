use std::io;	// bring in input/output from std library


// Easier way to hold color info
pub struct ColorProfile {
	pub colorspace: str,
	pub gamma: str,
}

// impl to display color profile when println! is used
impl std::fmt::Display for ColorProfile {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "Colorspace: {}, Gamma: {}", &self.colorspace, &self.gamma)
    }
}

// gets filename formatted colorprofile
impl ColorProfile {
	fn filename(&self) -> String {
		let s1: String = self.colorspace.replace(" ", "").replace("-", "").replace(".", "");
		let s2: String = self.gamma.replace(" ", "").replace("-", "").replace(".", "");
		
		format!("{s1}_{s2}")
	}
}

// Creates ColorProfile struct based on user input
// input: &str containing "input" or "output"
// output: ColorProfile
pub fn get_color(profile: &str) -> ColorProfile {

	// prompt for user
	println!("
[0] ACES AP0
[1] ARRI Wide Gamut 3
[2] RED Wide Gamut RGB
[3] Sony S-Gamut3.Cine

What is your {} color space?
	", &profile);
	
	// loop incase there is an error
	let input = loop {
	
		let mut input = String::new();	// creates mutable variable empty string for input color space
		
		io::stdin()	// trying to read user input
			.read_line(&mut input)
			.expect("Failed to read color space");

		let input: u8 = match input.trim().parse() {	// converts input from string to number, if possible
			Ok(num) => {
						if num <= 3 {	// if number acceptable return it
							num
						} else {
							println!("Please input a number listed above");	// if number not recognized restart loop
							continue
						}
			},
			Err(_) => {
						println!("Please input a number");	// otherwise loop restarts
						continue
			},							
		};
		
		break input;	// returns user input
	};
	
	// go from input to string color space
	let ics = match &input {
		1 => {String::from("ARRI Wide Gamut 3")},
		2 => {String::from("RED Wide Gamut RGB")},
		3 => {String::from("Sony S-Gamut3.Cine")},
		_ => {String::from("ACES AP0")},
	};
	

	// creates recommended gamma
	let rec = match &input {
		1 => String::from("ARRI LogC3"),
		2 => String::from("RED Log3G10"),
		3 => String::from("Sony S-Log3"),
		_ => String::from("Linear"),
	};

	// prompt for user
	println!("
[Enter] {}
[0] Linear
[1] ARRI LogC3
[2] RED Log3G10
[3] Sony S-Log3

What is your {} gamma?
	", &rec, &profile);
	
	let input = loop {
		let mut input = String::new();
		io::stdin()	// trying to read user input
				.read_line(&mut input)
				.expect("Failed to read gamma");
		
		// if the user takes our suggestion, kill the loop and return u8 max
		if input == String::from("\n") {
			break u8::MAX;
		}
	
		let input: u8 = match input.trim().parse() {	// converts input from string to number, if possible
			Ok(num) => {
						if num <= 3 {	// if number acceptable return it
							num
						} else {
							println!("Please input a number listed above");	// if number not recognized restart loop
							continue
						}
			},
			Err(_) => {
						println!("Please input a number");	// otherwise loop restarts
						continue
			},							
		};
		
		break input;	// returns user input
	};
	
	// go from input to string gamma
	let ig = match &input {
		&u8::MAX => {rec},
		1 => {String::from("ARRI LogC3")},
		2 => {String::from("RED Log3G10")},
		3 => {String::from("Sony S-Log3")},
		_ => {String::from("Linear")},
	};

	
	let result = ColorProfile {
		colorspace: ics,
		gamma: ig,
	};
	
	result
}

pub fn get_name(input: &ColorProfile, output: &ColorProfile) -> String {
	let s1: String = input.filename();
	let s2: String = output.filename();
	
	format!("{s1}_to_{s2}.dctl")
}
