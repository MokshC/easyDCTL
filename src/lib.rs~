use std::io;	// bring in input/output from std library

// Easier way to hold color info
pub struct ColorProfile {
	colorspace: String,
	gamma: String,
}

// impl to display color profile when println! is used
impl std::fmt::Display for ColorProfile {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "colorsapce: {}, gamma: {}", &self.colorspace, &self.gamma)
    }
}

pub fn get_input() -> ColorProfile{

	// prompt for user
	println!("
		[0] ACES AP0
		[1] ARRI Wide Gamut 3
		[2] RED Wide Gamut RGB
		[3] Sony S-Gamut3.Cine

		What is your input color space?
	");
	
	// loop incase there is an error
	let input = loop {
	
		let mut input = String::new();	// creates mutable variable empty string for input color space
		
		io::stdin()	// trying to read user input
			.read_line(&mut input)
			.expect("Failed to read input color space");

		let input: u8 = match input.trim().parse() {	// converts input from string to number, if possible
			Ok(num) => {
						if (num >= 0) & (num <= 3) {	// if number acceptable return it
							num
						} else {
							println!("Please input a number listed above");	// if number not recognized restart loop
							continue
						}
			},
			Err(_) => {
						println!("Please input a number");	// otherwise loop restarts
						continue
			},							
		};
		
		break input;	// returns user input
	};
	
	// go from input to string color space
	let ics = match &input {
		1 => {String::from("ARRI Wide Gamut 3")},
		2 => {String::from("RED Wide Gamut RGB")},
		3 => {String::from("Sony S-Gamut3.Cine")},
		_ => {String::from("ACES AP0")},
	};
	

	// creates recommended gamma
	let rec = match &input {
		1 => String::from("ARRI LogC3"),
		2 => String::from("RED Log3G10"),
		3 => String::from("Sony S-Log3"),
		_ => String::from("Linear"),
	};

	// prompt for user
	println!("
		[Enter] {}
		[0] Linear
		[1] ARRI LogC3
		[2] RED Log3G10
		[3] Sony S-Log3

		What is your input gamma?
	", &rec);
	
	let input = loop {
		let mut input = String::new();
		io::stdin()	// trying to read user input
				.read_line(&mut input)
				.expect("Failed to read input gamma");
		
		// if the user takes our suggestion, kill the loop and return u8 max
		if input == String::from("\n") {
			break u8::MAX;
		}
	
		let input: u8 = match input.trim().parse() {	// converts input from string to number, if possible
			Ok(num) => {
						if (num >= 0) & (num <= 3) {	// if number acceptable return it
							num
						} else {
							println!("Please input a number listed above");	// if number not recognized restart loop
							continue
						}
			},
			Err(_) => {
						println!("Please input a number");	// otherwise loop restarts
						continue
			},							
		};
		
		break input;	// returns user input
	};
	
	// go from input to string gamma
	let ig = match &input {
		&u8::MAX => {rec},
		1 => {String::from("ARRI LogC3")},
		2 => {String::from("RED Log3G10")},
		3 => {String::from("Sony S-Log3")},
		_ => {String::from("Linear")},
	};

	
	let result = ColorProfile {
		colorspace: ics,
		gamma: ig,
	};
	
	println!("{result}");
	result
}	
