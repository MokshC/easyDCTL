//
//  ARRI WG LogC3 to Sony SLog3
//

typedef struct
{
    float a00, a01, a02;
    float a10, a11, a12;
    float a20, a21, a22;    
} Matrix;

__DEVICE__ float3 matrixTransform(float3 p_rgb)
{
	Matrix cam;
	
	cam.a00 = 1.55546f; cam.a01 = 0.0090216f; cam.a02 = 0.0442641f;
    cam.a10 = -0.393281f; cam.a11 = 0.918557f; cam.a12 = 0.0118503f;
    cam.a20 = -0.162178f; cam.a21 = 0.0724214f; cam.a22 = 0.943886f;

	float3 result;
	
	result.x = cam.a00*p_rgb.x + cam.a10*p_rgb.y + cam.a20*p_rgb.z;
	result.y = cam.a01*p_rgb.x + cam.a11*p_rgb.y + cam.a21*p_rgb.z;
	result.z = cam.a02*p_rgb.x + cam.a12*p_rgb.y + cam.a22*p_rgb.z;
	
	return result;
}
__DEVICE__ float linToLog(float x)
{
    float result;
    if ( x >= 0.01125000f)
    {
        result = (420.0f + _log10f((x + 0.01f) / (0.18f + 0.01f)) * 261.5f) / 1023.0f;
    }
    else
    {
        result = (x * (171.2102946929f - 95.0f) / 0.01125000f + 95.0f) / 1023.0f;
    }
    return result;
}
__DEVICE__ float3 linToLog(float3 rgb)
{
	float3 rgbSony = matrixTransform(rgb);
	// float3 rgbSony = rgb

    rgbSony.x = linToLog(rgbSony.x);
    rgbSony.y = linToLog(rgbSony.y);
    rgbSony.z = linToLog(rgbSony.z);

	return rgbSony;
}

__DEVICE__ float logToLin(float p_X)
{
	const float midGraySignal = 0.01;
	const float cut = 1.0 / 9.0;
	const float slope = 3.9086503371;
	const float offset =  -1.3885369913;
	const float encOffset = 0.3855369987;
	const float gain = 800.0 / 400.0;
	const float encGain = 0.2471896383;
	const float gray = 0.005;
	const float nz = 0.0522722750;

    float result = (p_X - encOffset) / encGain;
    float ns = (result - offset) / slope;
    if (ns > cut)
    {
        ns = _powf(10.0f, result);
    }
    ns = (ns - nz) * gray;
    return ns * (0.18f * gain / midGraySignal);
}

__DEVICE__ float3 logToLin(float3 rgb)
{
    rgb.x = logToLin(rgb.x);
    rgb.y = logToLin(rgb.y);
    rgb.z = logToLin(rgb.z);
    
    float3 result;
    
	result.x = rgb.x * 6.8020600000000e-01 + rgb.y * 2.3613700000000e-01 + rgb.z * 8.3658000000000e-02;
	result.y = rgb.x * 8.5415000000000e-02 + rgb.y * 1.0174710000000e+00 + rgb.z * -1.0288600000000e-01;
	result.z = rgb.x * 2.0570000000000e-03 + rgb.y * -6.2563000000000e-02 + rgb.z * 1.0605060000000e+00;
    
    return result;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
	
	float3 rgb = make_float3(p_R, p_G, p_B);
	float3 rgbLin = logToLin(rgb);
    float3 rgbSLog = linToLog(rgbLin);
    
    return rgbSLog;
}

